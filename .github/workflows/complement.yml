name: Complement Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  complement:
    name: Run Complement Compliance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # Give Complement more time to spawn the homeserver in CI
      COMPLEMENT_SPAWN_HS_TIMEOUT_SECS: "300"
      # Force Complement to use the loopback host IP for port binding lookups
      HSPortBindingIP: "127.0.0.1"
    
    steps:
    - name: Checkout FERRETCANNON
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Complement Docker Image
      run: |
        docker build -t complement-ferretcannon:latest -f Complement.Dockerfile .
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: false
        
    - name: Checkout Complement
      uses: actions/checkout@v4
      with:
        repository: matrix-org/complement
        path: complement-checkout
        
    - name: Run Complement Tests
      working-directory: complement-checkout
      env:
        COMPLEMENT_BASE_IMAGE: complement-ferretcannon:latest
        NO_COLOR: "1"
        TERM: dumb
        COMPLEMENT_SPAWN_HS_TIMEOUT_SECS: "300"
      run: |
        go test -v -timeout 45m -json ./tests/... 2>&1 | tee complement-output.json || true
      continue-on-error: true
      
    - name: Parse Test Results
      if: always()
      run: |
        cd complement-checkout || exit 0

        # Check if output file exists
        if [ ! -f complement-output.json ]; then
          echo "## Complement Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ No test output file found. Tests may not have run." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        # Use jq to parse JSON output and compute per-test final actions.
        # go test -json emits multiple events per test; group by .Test and
        # take the last event to determine the final Action for each test.
        echo "## Complement Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Install jq on the runner
        sudo apt-get update && sudo apt-get install -y jq

        # Read line-delimited output but ignore non-JSON lines (some runners or tools
        # may interleave non-JSON text). Use fromjson with catch to skip invalid lines.
        PASSED=$(jq -R -s 'split("\n") | map(try fromjson catch null) | map(select(.!=null and .Test != null)) | group_by(.Test) | map(.[-1]) | map(select(.Action=="pass")) | length' complement-output.json)
        FAILED=$(jq -R -s 'split("\n") | map(try fromjson catch null) | map(select(.!=null and .Test != null)) | group_by(.Test) | map(.[-1]) | map(select(.Action=="fail")) | length' complement-output.json)
        SKIPPED=$(jq -R -s 'split("\n") | map(try fromjson catch null) | map(select(.!=null and .Test != null)) | group_by(.Test) | map(.[-1]) | map(select(.Action=="skip")) | length' complement-output.json)

        echo "✅ **Passed**: $PASSED" >> $GITHUB_STEP_SUMMARY
        echo "❌ **Failed**: $FAILED" >> $GITHUB_STEP_SUMMARY
        echo "⏭️ **Skipped**: $SKIPPED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$FAILED" -gt 0 ]; then
          echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          jq -R -s 'split("\n") | map(try fromjson catch null) | map(select(.!=null and .Test != null)) | group_by(.Test) | map(.[-1]) | .[] | select(.Action=="fail") | .Test' complement-output.json \
            | sed 's/^"//;s/"$//' | sort -u | while read test; do
              echo "- ❌ $test" >> $GITHUB_STEP_SUMMARY
            done
        fi
      
    - name: Produce compact JSON summary
      if: always()
      working-directory: complement-checkout
      run: |
        sudo apt-get update && sudo apt-get install -y jq
        chmod +x ../scripts/summarize_complement.sh
        ../scripts/summarize_complement.sh .

    - name: Upload compact summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: complement-summary
        path: |
          complement-checkout/complement-summary.json
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Upload Test Output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: complement-results
        path: |
          complement-checkout/complement-output.json
          complement-checkout/*.log
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Check Test Status
      if: always()
      run: |
        cd complement-checkout || exit 0
        
        # Check if output file exists
        if [ ! -f complement-output.json ]; then
          echo "::warning::No test output file found. Tests may not have run."
          exit 0
        fi
        
        FAILED=$(grep -c '"Action":"fail"' complement-output.json 2>/dev/null || echo "0")
        if [ "$FAILED" -gt 0 ]; then
          echo "::warning::$FAILED Complement tests failed"
          # Don't exit 1 - just report the failures
        fi
